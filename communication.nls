;;; File to be included in NetLogo Mutliagent Models
;;; Communication for NetLogo Multiagent models
;;; Includes primitives for message creation and handling in NetLogo 
;;; Original Version for Netlogo 2 (2005) I. Sakellariou
;;; Adapted to NetLogo 4 (2008) I. Sakellariou
;;; Extended (2013) I. Sakellariou with some additions/proposals from 
;;; the warlogo-communication.nls, auth. Jacques Ferber, Fabien Hervouet, Lois Vanhee
;;; Ported to NetLogo v.6 (2018)

;;; Requirements
;;; 1) All agents that are able to communicate MUST have a declated <breed>-own variable incoming-queue.
;;; This is the variable to which all messages are recorded. So, in your model if there is a breed of turtles 
;;; which you desire to communicate, then you should have a BREED-own [incoming-queue] declaration (along with any other 
;;; variables that you wish to include in your model.
;;; MAKE SURE that during agent (turtle) initialisation, the init-messaging procedureis called (set the value of incoming-queue to the empty list -[]).
;;; 2) Your model should have a switch (check NetLogo manual) named "show-messages" (ATTENTION the previous underscore was changed to _).


;;; CHANGES 2013
; 1) init-messages was introduced to intialise incoming-queue to an empty list.
; 2) have-message? reporter was added to check whether unprocessed messages exist in queue.
; 3) clear-message-queue procedure Clears message queue.
; 4) time stamping, message expiration, reply-with, reply-by etc
; 5) "Local" procedures and variable names, prefixed by com-lib##* in order to avoid conflicts (as possible) with user defined variables. 
; 6) Internal changes to the library (message format, etc).
; 7) Addition of some error messages. 
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; COMMUNICATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; MESSAGE PROCESSING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

globals [com-lib##debug-mode com-lib##conversation-id]


;;; Message queue initialization 
;;; Since the incoming-queue is a STRICT prerequisite for communication, if the variable is not 
;;; declared, (<breed>-own) then an error message is produced. 
to init-messaging
  carefully 
    [set incoming-queue []]
    [user-message (word "FIPA ACL LIB: Turtle " who " has no variable incoming-queue. This a requirment for the communication library.")]  
end


to set-communication-debug-mode [com-lib##mode]
  set com-lib##debug-mode com-lib##mode
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Sending Messages
;; (One man's send is another man's receive..)
;; The second commented out line presents an alternative send implementation. 
;; The commented out line represents an alternative method. 
;; Problem: What if the agent I am sending the message is "killed" 
;; Solution: Yields an error message if the debug mode is > 0. 
;; Messages are timestamped on send. 
to send [com-lib##msg]
  carefully
   [foreach get-receivers com-lib##msg [
      [?x] ->  without-interruption [ask ?x [com-lib##receive (com-lib##timestamp com-lib##msg)]] ]
   ]
  [if (com-lib##debug-mode > 0) [user-message (word "FIPA ACL LIB: Empty receiver field in message:" com-lib##msg ".")]]
end


;; Broadcasting to all agents of breed t-breed
;; Synatic sugar.
to broadcast-to [com-lib##t-breed com-lib##msg]
  send add-multiple-receivers com-lib##t-breed com-lib##msg
end 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Message reception deals with updating incoming-queue
;;; The receive procedure is internal to the library.
to com-lib##receive [com-lib##msg]
   if com-lib##debug-mode > 1 [show (word "FIPA ACL Message Received: "  com-lib##msg)]
   set incoming-queue lput com-lib##msg incoming-queue
end 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Message Reception and Processing.

;; Reporter returns the next message in the list and removes it from the queue.
;; if there is no message reports "no_message"
to-report get-message
  if empty? incoming-queue [report no-message ]
  let com-lib##nextmsg first incoming-queue
  remove-msg
  report com-lib##nextmsg     
end 

;; Reporter returns the next message in the list WITHOUT removimg it from the queue.
to-report get-message-no-remove
  if empty? incoming-queue [report no-message]
  report first incoming-queue
end

;;; No message checking (This is to simplify tests for cheking messages).
to-report no-message report ["no-message"] end

;; Explicit remove-msg. 
;; This is needed since reporters *cannot* change a variable's values (apparently). 
to remove-msg
  set incoming-queue but-first incoming-queue
end 

;;; Removes a specific message from the queue.
to remove-this-msg [com-lib##message]
  set incoming-queue remove-item (position com-lib##message incoming-queue) incoming-queue
end

;;; Gets the first message whose performative is given as a parameter 
;;; and removes it from the list. 
;;; Foor efficiency reasons this is UNSAFE! Check with corresponding reporter such a message exists first.
to-report get-message-of-type [com-lib##type]
  let com-lib##msg first com-lib##messages-of-type com-lib##type
  remove-this-msg com-lib##msg
  report com-lib##msg
end

;;; Reports true if incoming-queue is empty
to-report have-message?
  report not empty? incoming-queue 
end

;;; Reports true if incoming-queue is empty
;;; AFTER clearing all expired messages
to-report have-valid-message?
  clear-expired-messages
  report have-message? 
end

;;; Reports true if there is a message in the queue of the specific type.
to-report have-message-of-type? [com-lib##type]
 report not empty? com-lib##messages-of-type com-lib##type
end

;;; reports the list of messages under the specific performative in the queue.
to-report com-lib##messages-of-type [com-lib##type]
  report filter [[?x] -> get-performative ?x = com-lib##type] incoming-queue
end

;;; Managing the queue 
;;; clears the message-queue
to clear-message-queue
  set incoming-queue []
end

;;; clears queue from expired messages
;;; messages that expires at 30 ticks will be removed at the 31st tick.
to clear-expired-messages
  set incoming-queue filter [[?x] -> (not message-expires? ?x) or (get-expiration-time ?x >= ticks) ] incoming-queue
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Message Creation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Creating Messages and adding the sender.
;; The sender is always assumed to be the calling turtle.
to-report create-message [performative]
 report (list performative (list "sender:" self) ) 
end 

;; Creates a reply message with a specific performative to a specific performative.
;; If the message to reply has a conversation-id, the reply automatically sets it. 
to-report create-reply [com-lib##performative com-lib##msg]
 ifelse (has-conversation-id? com-lib##msg) 
   [report add-conversation-id (get-conversation-id com-lib##msg) add-receiver (get-sender com-lib##msg) create-message com-lib##performative]
   [report add-receiver (get-sender com-lib##msg) create-message com-lib##performative]
end 

;; Accesing information on Messages
;; Reports the sender of a message
to-report get-sender [com-lib##msg]
  report com-lib##get "sender:" com-lib##msg 
end

;; Reports (returns) the content of a message
to-report get-content [com-lib##msg]
  report com-lib##get "content:" com-lib##msg 
end

;; Reports the list of receivers of a message
;; com-lib##get cannot be used since here we expect a list.
to-report get-receivers [com-lib##msg]
  report map [ [?y] -> item 1 ?y] filter [[?x] -> is-list? ?x and first ?x = "receiver:"] com-lib##msg
end 

;; reports the message performative. 
to-report get-performative [com-lib##msg]
  report first com-lib##msg
end 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Time related code
to-report get-timestamp [com-lib##msg]
  report com-lib##get "timestamp:" com-lib##msg 
end

;;; SAFE get-expiration 
;;; If there is no expiration reports "no-expiration-time" 
to-report get-expiration-time [com-lib##msg]
  ifelse (message-expires? com-lib##msg) 
    [report com-lib##get "reply-by:" com-lib##msg] 
    [report "no-expiration-time"]
end

to-report message-expires? [com-lib##msg]
  report com-lib##has-field? "reply-by:" com-lib##msg
end

;;;; Conversations
;;; UNSAFE VERSION
to-report get-conversation-id [com-lib##msg]
  report com-lib##get "conversation-id:" com-lib##msg 
end

to-report has-conversation-id? [com-lib##msg]
  report com-lib##has-field? "conversation-id:" com-lib##msg
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; New perfromatives (CLOSER to NetLogo syntax )
;;; Aliases (Could do a lot better with a preprocessor)
to-report sender-of [com-lib##msg]  report get-sender com-lib##msg end  
to-report content-of [com-lib##msg]  report get-content com-lib##msg end  
to-report receivers-of [com-lib##msg]  report get-receivers com-lib##msg end  
to-report performative-of [com-lib##msg]  report get-performative com-lib##msg end  
to-report timestamp-of [com-lib##msg]  report get-timestamp com-lib##msg end 
to-report expiration-time-of [com-lib##msg]  report get-expiration-time com-lib##msg end 
to-report conversation-id-of [com-lib##msg]  report get-conversation-id com-lib##msg end 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ADDING FIELDS TO A MESSAGE
;; Adding a sender to a message.
to-report add-sender [com-lib##sender com-lib##msg]
  report com-lib##add "sender:" com-lib##sender com-lib##msg 
end

;; add a receiver
to-report add-receiver [com-lib##receiver com-lib##msg]
  report com-lib##add "receiver:" com-lib##receiver com-lib##msg 
end

;; adding multiple recipients
to-report add-multiple-receivers [com-lib##receivers com-lib##msg]
  foreach (list com-lib##receivers)
   [
      [?x] -> set com-lib##msg add-receiver ?x com-lib##msg
   ]
  report com-lib##msg
end

;; Adding content to a message 
to-report add-content [com-lib##content com-lib##msg]
  report com-lib##add "content:" com-lib##content com-lib##msg 
end

;;; adds a expiration time to the message 
;;; located after time-ticks from now (ticks)
to-report expires-after [com-lib##time-ticks com-lib##msg]
  report com-lib##add "reply-by:" (ticks + com-lib##time-ticks) com-lib##msg 
end

;;; adds a expiration time to the message 
;;; located at a specific time point
to-report expires-at [com-lib##time-ticks com-lib##msg]
  report com-lib##add "reply-by:" com-lib##time-ticks com-lib##msg 
end

;; Adding The conversation ID of a message. 
to-report add-conversation-id  [com-lib##new-conversation-id com-lib##msg]
  report com-lib##add "conversation-id:" com-lib##new-conversation-id com-lib##msg 
end

;;; Conversation ids start with 1.
;;; Ensures uniqueness
to-report generate-conversation-id
  set com-lib##conversation-id com-lib##conversation-id + 1
  report com-lib##conversation-id
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; INTERNAL REPORTERS
;; Adding a timestamp (stamps are ticks)
;; Internal to the library, thus com-lib## prefix exists (no modules)
to-report com-lib##timestamp [com-lib##msg]
  report com-lib##add "timestamp:" ticks com-lib##msg 
end


;; Primitive Add command 
;; Internal to the library, thus com-lib## prefix exists (no modules)
to-report com-lib##add [com-lib##field com-lib##value com-lib##msg]
    report lput (list com-lib##field com-lib##value) com-lib##msg
end  

;; Primitive Get Command
;; This is a safe get command. 
to-report com-lib##get [com-lib##field com-lib##msg]
  report item 1 first filter [[?x] -> is-list? ?x and first ?x = com-lib##field] com-lib##msg
end

;;; Primitive has-field?
to-report com-lib##has-field? [com-lib##field com-lib##msg]
  report not empty? filter [[?x] -> is-list? ?x and first ?x = com-lib##field] com-lib##msg
end  
